---
- name: A simple Load Balanced AWS server
  hosts: localhost 
  connection: local
  gather_facts: False
  tasks:
    - name: Create security group
      ec2_group:
        name: "webserver_sg"
        description: "webserver_sg"
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp  # ssh
            from_port: 22
            to_port: 22
            cidr_ip: "0.0.0.0/0"
          - proto: tcp  # http
            from_port: 80
            to_port: 80
            cidr_ip: "0.0.0.0/0"
          - proto: tcp  # https
            from_port: 443
            to_port: 443
            cidr_ip: "0.0.0.0/0"
        rules_egress:
          - proto: all
            cidr_ip: "0.0.0.0/0"
      register: webserver_sg

    - name: Create an EC2 instance
      ec2:
        key_name: "{{ pem_key }}"
        region: "{{ region }}"
        group_id: "{{ webserver_sg.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        wait: yes
        instance_tags:
            Name: "{{ tag }}"
        count_tag:
            Name: "{{ tag }}"
        exact_count: "{{ instance_count }}"
        vpc_subnet_id: "{{ private_subnet_id }}"
        assign_public_ip: yes
      register: ec2

    - name: Gather EC2 Details
      ec2_instance_facts:
        ec2_region: "{{ region }}"
        filters:
          instance-state-name: running
          "tag:Name": "{{ tag }}"
      register: ec2_config

    - name: wait for the servers to appear on the network
      wait_for: 
        host: "{{ item.public_dns_name }}"
        port: 22 
        delay: 10 
        timeout: 180
        state: started
      with_items: "{{ ec2.instances }}"

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: webservers
      with_items: "{{ ec2_config.instances }}"
    
- name: httpd Installation
  hosts: webservers
  remote_user: ec2-user
  become: true
  # become_method: sudo
  gather_facts: True
  roles:
    - httpd

- name: Creating Load balancer Security Group
  hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: ELB Security Group
      ec2_group:
        name: "elb_sg"
        description: "elb_sg"
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp  # http
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # https
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: elb_sg
    - name: SG Information
      debug:
        var: elb_sg  

    - name: Create CLB if not exists
      ec2_elb_lb:
        name: httpd-loadbalancer
        state: present
        region: "{{ region }}"
        security_group_ids: "{{ elb_sg.group_id }}"
        subnets:
          - "{{ public_subnet_id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
    
    - name: Gather Load Balancer Information
      action:
        module: ec2_elb_facts
        region: "{{ region }}"
        names: httpd-loadbalancer
      register: elb_facts
    
    - name: Print LoadBalancer Information
      debug:
        var: elb_facts.elbs[0].dns_name
        

    - name: Add EC2 instances to LoadBalancer
      local_action: ec2_elb
      args:
        instance_id: "{{ item.id }}"
        ec2_elbs: httpd-loadbalancer
        state: present
        region: "{{ region }}"
      with_items: "{{ ec2.tagged_instances }}"
    
    - name: Modify the Route 53 Record Set
      route53:
        state: present
        zone: my-demo.com
        record: my-demo.com
        type: A
        value: "{{ elb_facts.elbs[0].hosted_zone_name }}"
        alias: True
        alias_hosted_zone_id: Z35SXDOTRQ7X7K
        private_zone: True
        overwrite: True
        identifier: Canary
        weight: 50